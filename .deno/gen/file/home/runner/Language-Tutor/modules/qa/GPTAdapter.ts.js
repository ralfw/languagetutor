// High level adapter
export async function PromptForQuestions(prompt) {
    const txt = await askAsync(prompt, 0.25);
    return txt.split("\n");
}
export async function PromptForAssessment(prompt) {
    const json = await askAsync(prompt, 0.25);
    return JSON.parse(json);
}
// Low level adapter
const SECRET_KEY = Deno.env.get("openaiapikey");
const MAX_TOKENS = 2048;
const DEFAULT_MODEL = "text-davinci-003";
const DEFAULT_TEMPERATURE = 0.7;
export async function askAsync(prompt, temperature = DEFAULT_TEMPERATURE, model = DEFAULT_MODEL) {
    const payload = {
        model,
        prompt,
        temperature,
        max_tokens: MAX_TOKENS
    };
    const headers = new Headers({
        "Content-Type": "application/json",
        Authorization: `Bearer ${SECRET_KEY}`
    });
    const body = JSON.stringify(payload);
    const response = await fetch("https://api.openai.com/v1/completions", {
        method: "POST",
        headers,
        body
    });
    const res = await response.json();
    try {
        const generatedText = res.choices[0].text.trim();
        return generatedText;
    } catch (error) {
        throw new Error("No response from GPT-3 API! [" + error + "]");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vaG9tZS9ydW5uZXIvTGFuZ3VhZ2UtVHV0b3IvbW9kdWxlcy9xYS9HUFRBZGFwdGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlYWRKc29uU3luYyB9IGZyb20gXCJodHRwczovL2Rlbm8ubGFuZC9zdGQvZnMvbW9kLnRzXCI7XG5cbi8vIEhpZ2ggbGV2ZWwgYWRhcHRlclxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUHJvbXB0Rm9yUXVlc3Rpb25zKHByb21wdDpzdHJpbmcpOnN0cmluZ1tdIHtcbiAgY29uc3QgdHh0ID0gYXdhaXQgYXNrQXN5bmMocHJvbXB0LCAwLjI1KTtcbiAgcmV0dXJuIHR4dC5zcGxpdChcIlxcblwiKTtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIEFzc2Vzc21lbnQge1xuICBjb3JyZWN0OmJvb2xlYW5cbiAgZXhwbGFuYXRpb246c3RyaW5nXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQcm9tcHRGb3JBc3Nlc3NtZW50KHByb21wdDpzdHJpbmcpOkFzc2Vzc21lbnQge1xuICBjb25zdCBqc29uID0gYXdhaXQgYXNrQXN5bmMocHJvbXB0LCAwLjI1KVxuICByZXR1cm4gSlNPTi5wYXJzZShqc29uKSBhcyBBc3Nlc3NtZW50O1xufVxuXG5cbi8vIExvdyBsZXZlbCBhZGFwdGVyXG5cbmNvbnN0IFNFQ1JFVF9LRVkgPSBEZW5vLmVudi5nZXQoXCJvcGVuYWlhcGlrZXlcIik7XG5jb25zdCBNQVhfVE9LRU5TID0gMjA0ODtcbmNvbnN0IERFRkFVTFRfTU9ERUwgPSBcInRleHQtZGF2aW5jaS0wMDNcIjtcbmNvbnN0IERFRkFVTFRfVEVNUEVSQVRVUkUgPSAwLjdcblxuaW50ZXJmYWNlIE9wZW5BSVJlcXVlc3RQYXlsb2FkIHtcbiAgbW9kZWw6IHN0cmluZztcbiAgcHJvbXB0OiBzdHJpbmc7XG4gIHRlbXBlcmF0dXJlOiBudW1iZXI7XG4gIG1heF90b2tlbnM6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIE9wZW5BSVJlc3BvbnNlIHtcbiAgY2hvaWNlczoge1xuICAgIHRleHQ6IHN0cmluZztcbiAgICBpbmRleDogbnVtYmVyO1xuICAgIGxvZ3Byb2JzOiBhbnk7XG4gICAgZmluaXNoX3JlYXNvbjogc3RyaW5nO1xuICB9W107XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFza0FzeW5jKFxuICBwcm9tcHQ6IHN0cmluZyxcbiAgdGVtcGVyYXR1cmUgPSBERUZBVUxUX1RFTVBFUkFUVVJFLFxuICBtb2RlbCA9IERFRkFVTFRfTU9ERUxcbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IHBheWxvYWQ6IE9wZW5BSVJlcXVlc3RQYXlsb2FkID0ge1xuICAgIG1vZGVsLFxuICAgIHByb21wdCxcbiAgICB0ZW1wZXJhdHVyZSxcbiAgICBtYXhfdG9rZW5zOiBNQVhfVE9LRU5TLFxuICB9O1xuICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoe1xuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHtTRUNSRVRfS0VZfWAsXG4gIH0pO1xuICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkocGF5bG9hZCk7XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEvY29tcGxldGlvbnNcIiwge1xuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgaGVhZGVycyxcbiAgICBib2R5LFxuICB9KTtcbiAgY29uc3QgcmVzOiBPcGVuQUlSZXNwb25zZSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICB0cnkge1xuICAgIGNvbnN0IGdlbmVyYXRlZFRleHQgPSByZXMuY2hvaWNlc1swXS50ZXh0LnRyaW0oKTtcbiAgICByZXR1cm4gZ2VuZXJhdGVkVGV4dDtcbiAgfSBjYXRjaChlcnJvcikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHJlc3BvbnNlIGZyb20gR1BULTMgQVBJISBbXCIgKyBlcnJvciArIFwiXVwiKTtcbiAgfVxufSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFFckIsT0FBTyxlQUFlLG1CQUFtQixNQUFhLEVBQVc7SUFDL0QsTUFBTSxNQUFNLE1BQU0sU0FBUyxRQUFRO0lBQ25DLE9BQU8sSUFBSSxLQUFLLENBQUM7QUFDbkIsQ0FBQztBQVFELE9BQU8sZUFBZSxvQkFBb0IsTUFBYSxFQUFhO0lBQ2xFLE1BQU0sT0FBTyxNQUFNLFNBQVMsUUFBUTtJQUNwQyxPQUFPLEtBQUssS0FBSyxDQUFDO0FBQ3BCLENBQUM7QUFHRCxvQkFBb0I7QUFFcEIsTUFBTSxhQUFhLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQztBQUNoQyxNQUFNLGFBQWE7QUFDbkIsTUFBTSxnQkFBZ0I7QUFDdEIsTUFBTSxzQkFBc0I7QUFtQjVCLE9BQU8sZUFBZSxTQUNwQixNQUFjLEVBQ2QsY0FBYyxtQkFBbUIsRUFDakMsUUFBUSxhQUFhLEVBQ0o7SUFDakIsTUFBTSxVQUFnQztRQUNwQztRQUNBO1FBQ0E7UUFDQSxZQUFZO0lBQ2Q7SUFDQSxNQUFNLFVBQVUsSUFBSSxRQUFRO1FBQzFCLGdCQUFnQjtRQUNoQixlQUFlLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQztJQUN2QztJQUNBLE1BQU0sT0FBTyxLQUFLLFNBQVMsQ0FBQztJQUU1QixNQUFNLFdBQVcsTUFBTSxNQUFNLHlDQUF5QztRQUNwRSxRQUFRO1FBQ1I7UUFDQTtJQUNGO0lBQ0EsTUFBTSxNQUFzQixNQUFNLFNBQVMsSUFBSTtJQUUvQyxJQUFJO1FBQ0YsTUFBTSxnQkFBZ0IsSUFBSSxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJO1FBQzlDLE9BQU87SUFDVCxFQUFFLE9BQU0sT0FBTztRQUNiLE1BQU0sSUFBSSxNQUFNLGtDQUFrQyxRQUFRLEtBQUs7SUFDakU7QUFDRixDQUFDIn0=