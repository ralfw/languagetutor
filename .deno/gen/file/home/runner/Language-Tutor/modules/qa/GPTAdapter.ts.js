// High level adapter
export async function PromptForQuestionsAsync(prompt) {
    const txt = await askAsync(prompt, 0.25);
    return txt.split("\n");
}
export async function PromptForAssessmentAsync(prompt) {
    const json = await askAsync(prompt, 0.25);
    return JSON.parse(json);
}
// Low level adapter
const SECRET_KEY = Deno.env.get("openaiapikey");
const MAX_TOKENS = 2048;
const DEFAULT_MODEL = "text-davinci-003";
const DEFAULT_TEMPERATURE = 0.7;
export async function askAsync(prompt, temperature = DEFAULT_TEMPERATURE, model = DEFAULT_MODEL) {
    const payload = {
        model,
        prompt,
        temperature,
        max_tokens: MAX_TOKENS
    };
    const headers = new Headers({
        "Content-Type": "application/json",
        Authorization: `Bearer ${SECRET_KEY}`
    });
    const body = JSON.stringify(payload);
    const response = await fetch("https://api.openai.com/v1/completions", {
        method: "POST",
        headers,
        body
    });
    const res = await response.json();
    try {
        const generatedText = res.choices[0].text.trim();
        return generatedText;
    } catch (error) {
        throw new Error("No response from GPT-3 API! [" + error + "]");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vaG9tZS9ydW5uZXIvTGFuZ3VhZ2UtVHV0b3IvbW9kdWxlcy9xYS9HUFRBZGFwdGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlYWRKc29uU3luYyB9IGZyb20gXCJodHRwczovL2Rlbm8ubGFuZC9zdGQvZnMvbW9kLnRzXCI7XG5cbi8vIEhpZ2ggbGV2ZWwgYWRhcHRlclxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUHJvbXB0Rm9yUXVlc3Rpb25zQXN5bmMocHJvbXB0OnN0cmluZyk6c3RyaW5nW10ge1xuICBjb25zdCB0eHQgPSBhd2FpdCBhc2tBc3luYyhwcm9tcHQsIDAuMjUpO1xuICByZXR1cm4gdHh0LnNwbGl0KFwiXFxuXCIpO1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgQXNzZXNzbWVudCB7XG4gIGNvcnJlY3Q6Ym9vbGVhblxuICBleHBsYW5hdGlvbjpzdHJpbmdcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFByb21wdEZvckFzc2Vzc21lbnRBc3luYyhwcm9tcHQ6c3RyaW5nKTpBc3Nlc3NtZW50IHtcbiAgY29uc3QganNvbiA9IGF3YWl0IGFza0FzeW5jKHByb21wdCwgMC4yNSlcbiAgcmV0dXJuIEpTT04ucGFyc2UoanNvbikgYXMgQXNzZXNzbWVudDtcbn1cblxuXG4vLyBMb3cgbGV2ZWwgYWRhcHRlclxuXG5jb25zdCBTRUNSRVRfS0VZID0gRGVuby5lbnYuZ2V0KFwib3BlbmFpYXBpa2V5XCIpO1xuY29uc3QgTUFYX1RPS0VOUyA9IDIwNDg7XG5jb25zdCBERUZBVUxUX01PREVMID0gXCJ0ZXh0LWRhdmluY2ktMDAzXCI7XG5jb25zdCBERUZBVUxUX1RFTVBFUkFUVVJFID0gMC43XG5cbmludGVyZmFjZSBPcGVuQUlSZXF1ZXN0UGF5bG9hZCB7XG4gIG1vZGVsOiBzdHJpbmc7XG4gIHByb21wdDogc3RyaW5nO1xuICB0ZW1wZXJhdHVyZTogbnVtYmVyO1xuICBtYXhfdG9rZW5zOiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBPcGVuQUlSZXNwb25zZSB7XG4gIGNob2ljZXM6IHtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgaW5kZXg6IG51bWJlcjtcbiAgICBsb2dwcm9iczogYW55O1xuICAgIGZpbmlzaF9yZWFzb246IHN0cmluZztcbiAgfVtdO1xufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhc2tBc3luYyhcbiAgcHJvbXB0OiBzdHJpbmcsXG4gIHRlbXBlcmF0dXJlID0gREVGQVVMVF9URU1QRVJBVFVSRSxcbiAgbW9kZWwgPSBERUZBVUxUX01PREVMXG4pOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCBwYXlsb2FkOiBPcGVuQUlSZXF1ZXN0UGF5bG9hZCA9IHtcbiAgICBtb2RlbCxcbiAgICBwcm9tcHQsXG4gICAgdGVtcGVyYXR1cmUsXG4gICAgbWF4X3Rva2VuczogTUFYX1RPS0VOUyxcbiAgfTtcbiAgY29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHtcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7U0VDUkVUX0tFWX1gLFxuICB9KTtcbiAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpO1xuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXCJodHRwczovL2FwaS5vcGVuYWkuY29tL3YxL2NvbXBsZXRpb25zXCIsIHtcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGhlYWRlcnMsXG4gICAgYm9keSxcbiAgfSk7XG4gIGNvbnN0IHJlczogT3BlbkFJUmVzcG9uc2UgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBnZW5lcmF0ZWRUZXh0ID0gcmVzLmNob2ljZXNbMF0udGV4dC50cmltKCk7XG4gICAgcmV0dXJuIGdlbmVyYXRlZFRleHQ7XG4gIH0gY2F0Y2goZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyByZXNwb25zZSBmcm9tIEdQVC0zIEFQSSEgW1wiICsgZXJyb3IgKyBcIl1cIik7XG4gIH1cbn0iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBRXJCLE9BQU8sZUFBZSx3QkFBd0IsTUFBYSxFQUFXO0lBQ3BFLE1BQU0sTUFBTSxNQUFNLFNBQVMsUUFBUTtJQUNuQyxPQUFPLElBQUksS0FBSyxDQUFDO0FBQ25CLENBQUM7QUFRRCxPQUFPLGVBQWUseUJBQXlCLE1BQWEsRUFBYTtJQUN2RSxNQUFNLE9BQU8sTUFBTSxTQUFTLFFBQVE7SUFDcEMsT0FBTyxLQUFLLEtBQUssQ0FBQztBQUNwQixDQUFDO0FBR0Qsb0JBQW9CO0FBRXBCLE1BQU0sYUFBYSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUM7QUFDaEMsTUFBTSxhQUFhO0FBQ25CLE1BQU0sZ0JBQWdCO0FBQ3RCLE1BQU0sc0JBQXNCO0FBbUI1QixPQUFPLGVBQWUsU0FDcEIsTUFBYyxFQUNkLGNBQWMsbUJBQW1CLEVBQ2pDLFFBQVEsYUFBYSxFQUNKO0lBQ2pCLE1BQU0sVUFBZ0M7UUFDcEM7UUFDQTtRQUNBO1FBQ0EsWUFBWTtJQUNkO0lBQ0EsTUFBTSxVQUFVLElBQUksUUFBUTtRQUMxQixnQkFBZ0I7UUFDaEIsZUFBZSxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUM7SUFDdkM7SUFDQSxNQUFNLE9BQU8sS0FBSyxTQUFTLENBQUM7SUFFNUIsTUFBTSxXQUFXLE1BQU0sTUFBTSx5Q0FBeUM7UUFDcEUsUUFBUTtRQUNSO1FBQ0E7SUFDRjtJQUNBLE1BQU0sTUFBc0IsTUFBTSxTQUFTLElBQUk7SUFFL0MsSUFBSTtRQUNGLE1BQU0sZ0JBQWdCLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSTtRQUM5QyxPQUFPO0lBQ1QsRUFBRSxPQUFNLE9BQU87UUFDYixNQUFNLElBQUksTUFBTSxrQ0FBa0MsUUFBUSxLQUFLO0lBQ2pFO0FBQ0YsQ0FBQyJ9