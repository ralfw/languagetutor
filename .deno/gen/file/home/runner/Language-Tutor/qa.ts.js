import { Load } from "./modules/TxtAdapter.ts";
import { Parse } from "./modules/qa/CmdlinePortal.ts";
import { PromptForQuestionsAsync, PromptForAssessmentAsync } from "./modules/qa/GPTAdapter.ts";
import { InstantiatePromptForQuestions, InstantiatePromptForAssessment } from "./modules/qa/PromptAdapter.ts";
import { SelectWords } from "./modules/qa/QACore.ts";
import { AskAsync, PresentResult } from "./modules/qa/QAPortal.ts";
const cmdLineParams = Parse();
const allWords = Load(cmdLineParams.wordFilepaths[0]);
const words = SelectWords(allWords, cmdLineParams.numberOfWords);
let prompt = InstantiatePromptForQuestions(cmdLineParams.questionLanguage, cmdLineParams.numberOfQuestions, words);
const questions = await PromptForQuestionsAsync(prompt);
await AskAsync(questions, async (question, answer)=>{
    prompt = InstantiatePromptForAssessment(cmdLineParams.questionLanguage, cmdLineParams.answerLanguage, question, answer);
    const result = await PromptForAssessmentAsync(prompt);
    PresentResult(result.correct, result.explanation);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vaG9tZS9ydW5uZXIvTGFuZ3VhZ2UtVHV0b3IvcWEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9hZCB9IGZyb20gXCIuL21vZHVsZXMvVHh0QWRhcHRlci50c1wiXG5pbXBvcnQgeyBQYXJzZSB9IGZyb20gXCIuL21vZHVsZXMvcWEvQ21kbGluZVBvcnRhbC50c1wiXG5pbXBvcnQgeyBQcm9tcHRGb3JRdWVzdGlvbnNBc3luYywgUHJvbXB0Rm9yQXNzZXNzbWVudEFzeW5jIH0gZnJvbSBcIi4vbW9kdWxlcy9xYS9HUFRBZGFwdGVyLnRzXCJcbmltcG9ydCB7IEluc3RhbnRpYXRlUHJvbXB0Rm9yUXVlc3Rpb25zLCBJbnN0YW50aWF0ZVByb21wdEZvckFzc2Vzc21lbnQgfSBmcm9tIFwiLi9tb2R1bGVzL3FhL1Byb21wdEFkYXB0ZXIudHNcIlxuaW1wb3J0IHsgU2VsZWN0V29yZHMgfSBmcm9tIFwiLi9tb2R1bGVzL3FhL1FBQ29yZS50c1wiXG5pbXBvcnQgeyBBc2tBc3luYywgUHJlc2VudFJlc3VsdCB9IGZyb20gXCIuL21vZHVsZXMvcWEvUUFQb3J0YWwudHNcIlxuXG5jb25zdCBjbWRMaW5lUGFyYW1zID0gUGFyc2UoKTtcbmNvbnN0IGFsbFdvcmRzID0gTG9hZChjbWRMaW5lUGFyYW1zLndvcmRGaWxlcGF0aHNbMF0pO1xuY29uc3Qgd29yZHMgPSBTZWxlY3RXb3JkcyhhbGxXb3JkcywgY21kTGluZVBhcmFtcy5udW1iZXJPZldvcmRzKTtcblxubGV0IHByb21wdCA9IEluc3RhbnRpYXRlUHJvbXB0Rm9yUXVlc3Rpb25zKGNtZExpbmVQYXJhbXMucXVlc3Rpb25MYW5ndWFnZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY21kTGluZVBhcmFtcy5udW1iZXJPZlF1ZXN0aW9ucywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29yZHMpO1xuY29uc3QgcXVlc3Rpb25zID0gYXdhaXQgUHJvbXB0Rm9yUXVlc3Rpb25zQXN5bmMocHJvbXB0KTtcblxuYXdhaXQgQXNrQXN5bmMocXVlc3Rpb25zLFxuICAgYXN5bmMgKHF1ZXN0aW9uLCBhbnN3ZXIpID0+IHtcbiAgICAgcHJvbXB0ID0gSW5zdGFudGlhdGVQcm9tcHRGb3JBc3Nlc3NtZW50KGNtZExpbmVQYXJhbXMucXVlc3Rpb25MYW5ndWFnZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWRMaW5lUGFyYW1zLmFuc3dlckxhbmd1YWdlLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uLCBhbnN3ZXIpO1xuICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBQcm9tcHRGb3JBc3Nlc3NtZW50QXN5bmMocHJvbXB0KTtcbiAgICAgUHJlc2VudFJlc3VsdChyZXN1bHQuY29ycmVjdCwgcmVzdWx0LmV4cGxhbmF0aW9uKTtcbiAgIH0pO1xuXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxJQUFJLFFBQVEsMEJBQXlCO0FBQzlDLFNBQVMsS0FBSyxRQUFRLGdDQUErQjtBQUNyRCxTQUFTLHVCQUF1QixFQUFFLHdCQUF3QixRQUFRLDZCQUE0QjtBQUM5RixTQUFTLDZCQUE2QixFQUFFLDhCQUE4QixRQUFRLGdDQUErQjtBQUM3RyxTQUFTLFdBQVcsUUFBUSx5QkFBd0I7QUFDcEQsU0FBUyxRQUFRLEVBQUUsYUFBYSxRQUFRLDJCQUEwQjtBQUVsRSxNQUFNLGdCQUFnQjtBQUN0QixNQUFNLFdBQVcsS0FBSyxjQUFjLGFBQWEsQ0FBQyxFQUFFO0FBQ3BELE1BQU0sUUFBUSxZQUFZLFVBQVUsY0FBYyxhQUFhO0FBRS9ELElBQUksU0FBUyw4QkFBOEIsY0FBYyxnQkFBZ0IsRUFDOUIsY0FBYyxpQkFBaUIsRUFDL0I7QUFDM0MsTUFBTSxZQUFZLE1BQU0sd0JBQXdCO0FBRWhELE1BQU0sU0FBUyxXQUNaLE9BQU8sVUFBVSxTQUFXO0lBQzFCLFNBQVMsK0JBQStCLGNBQWMsZ0JBQWdCLEVBQzlCLGNBQWMsY0FBYyxFQUM1QixVQUFVO0lBQ2xELE1BQU0sU0FBUyxNQUFNLHlCQUF5QjtJQUM5QyxjQUFjLE9BQU8sT0FBTyxFQUFFLE9BQU8sV0FBVztBQUNsRCJ9